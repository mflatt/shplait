#lang rhombus/static/and_meta
import:
  meta:
    "type.rhm" as t
  "type_statinfo.rhm" as t_s
  "value.rhm".value
  "value.rhm".value_meta
  "wrap.rhm" open
  "lazy.rhm" open
  "value.rhm".all_value_types

export:
  rename:
    brackets as #%brackets
  first
  rest
  cons
  list_get

value.macro
| 'brackets [$(v :: value_meta.Parsed), ...]':
    ~op_stx self
    cond
    | all_value_types([v, ...]):
        // type is currently relevant only to the degree that it's
        // a function type or not, so just explain that it's a list
        let tv = t.gen_tvar(self)  
        t_s.type_to_syntax(t.Poly(self, tv, t.ListOf(self, tv)))
    | ~else '#false'
| 'brackets [$_, ...]':
    '#false'

expr.macro 'brackets $(elems && '[$(elem :: expr_meta.Parsed), ...]')':
  let tv = t.gen_tvar(#false)
  let [[elem_ty, new_elem], ...] = [t_s.lookup_type(elem, elem.group), ...]
  Function.pass(t.unify_do(elem, tv, elem_ty), ...)
  t_s.wrap_type('#%brackets [maybe_delay($elem.group, $new_elem), ...]'.relocate_span([elems]),
                t.ListOf(elems, tv))

defwrap wrap_first first(l): Pair.first(dynamic_force(l))
defwrap wrap_rest rest(l): Pair.rest(dynamic_force(l))
defwrap wrap_cons cons(a, l): Pair.cons(a, l)

// could be defined in "lib.rhm", but defining it here
// avoids some redundant `is_a List` checks and takes a faster
// path when no lazy forcing is needed, so it simulates something
// closer to a machine primitive
defwrap wrap_list_get list_get(l, n):
  // `n` must be forced here to be used immediately in the non-lazy
  // branch.  This can occur when `l` is a value while `n` isn't in
  // lazy mode.
  recur loop (l = l, n = dynamic_force(n)):
    cond
    | (l is_a Pair):
        if n == 0
        | Pair.first(l)
        | loop(Pair.rest(l), n - 1)
    | (l === []):
        error(#'list_get, "index out of range")
    | ~else:
        // must be lazy
        loop(dynamic_force(l), n)

expr.macro 'first':
  ~op_stx self
  let tv = t.gen_tvar(self)
  t_s.wrap_type('wrap_first'.relocate(self),
                t.Poly(self, tv, t.Arrow(self, [t.ListOf(self, tv)], tv)))

expr.macro 'rest':
  ~op_stx self
  let tv = t.gen_tvar(self)
  let ty = t.ListOf(self, tv)
  t_s.wrap_type('wrap_rest'.relocate(self),
                t.Poly(self, tv, t.Arrow(self, [ty], ty)))

expr.macro 'cons':
  ~op_stx self
  let tv = t.gen_tvar(self)
  let ty = t.ListOf(self, tv)
  t_s.wrap_type('wrap_cons'.relocate(self),
                t.Poly(self, tv, t.Arrow(self, [tv, ty], ty)))

expr.macro 'list_get':
  ~op_stx self
  let tv = t.gen_tvar(self)
  t_s.wrap_type('wrap_list_get'.relocate(self),
                t.Poly(self, tv, t.Arrow(self, [t.ListOf(self, tv), t.Num(self)], tv)))

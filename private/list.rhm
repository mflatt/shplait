#lang rhombus/static/and_meta
import:
  meta:
    "type.rhm" as t
  "type_statinfo.rhm" as t_s
  "value.rhm".value
  "value.rhm".value_meta
  "wrap.rhm" open
  "lazy.rhm" open
  "lazy.rhm".force_all as lazy_force_all    
  "value.rhm".all_value_types

export:
  rename:
    brackets as #%brackets
  first
  rest
  cons
  list_get

class SPair(first, rest):
  implements Printable
  override describe(mode, recur):
    recur(from_slist(this))
    
  implements Equatable
  override equals(other :~ SPair, recur):
    recur(dynamic_force(first), dynamic_force(other.first))
      && recur(dynamic_force(rest), dynamic_force(other.rest))
  override hash_code(recur):
    Equatable.hash_code_combine(recur(first), recur(rest))

  implements Forceable
  override force_all():
    SPair(lazy_force_all(first), lazy_force_all(rest))

fun | to_slist([]): []
    | to_slist([a, x, ...]): SPair(a, to_slist([x, ...]))
                             
fun | from_slist([]) :~ List: []
    | from_slist(SPair(f, r)) :~ List: List.cons(f, from_slist(r))
    | from_slist(v) :~ List:
        let fv = dynamic_force(v)
        if fv === v
        | error(~who: #'from_slist, "bad: " +& v)
        | from_slist(fv)

module rep:
  export:
    SPair
    to_slist
    from_slist

value.macro
| 'brackets [$(v :: value_meta.Parsed), ...]':
    ~op_stx self
    cond
    | all_value_types([v, ...]):
        // type is currently relevant only to the degree that it's
        // a function type or not, so just explain that it's a list
        let tv = t.gen_tvar(self)  
        t_s.type_to_syntax(t.Poly(self, tv, t.ListOf(self, tv)))
    | ~else '#false'
| 'brackets [$_, ...]':
    '#false'

expr.macro 'brackets $(elems && '[$(elem :: expr_meta.Parsed), ...]')':
  let tv = t.gen_tvar(#false)
  let [[elem_ty, new_elem], ...] = [t_s.lookup_type(elem, elem.group), ...]
  Function.pass(t.unify_do(elem, tv, elem_ty), ...)
  t_s.wrap_type('to_slist(#%brackets $('[maybe_delay($elem.group, $new_elem), ...]'.relocate(elems)))',
                elems,
                t.ListOf(elems, tv))

defwrap wrap_first first(l): match dynamic_force(l)
                             | []: error(~who: #'first, "failed on empty list")
                             | SPair(f, r): f
defwrap wrap_rest rest(l): match dynamic_force(l)
                           | []: error(~who: #'rest, "failed on empty list")
                           | SPair(f, r): r
defwrap wrap_cons cons(a, l): SPair(a, l)

// could be defined in "lib.rhm", but defining it here
// avoids some redundant `is_a List` checks and takes a faster
// path when no lazy forcing is needed, so it simulates something
// closer to a machine primitive
defwrap wrap_list_get list_get(l, n):
  // `n` must be forced here to be used immediately in the non-lazy
  // branch.  This can occur when `l` is a value while `n` isn't in
  // lazy mode.
  from_slist(l)[dynamic_force(n)]

expr.macro 'first':
  ~op_stx self
  let tv = t.gen_tvar(self)
  t_s.wrap_type('wrap_first'.relocate(self),
                t.Poly(self, tv, t.Arrow(self, [t.ListOf(self, tv)], tv)))

expr.macro 'rest':
  ~op_stx self
  let tv = t.gen_tvar(self)
  let ty = t.ListOf(self, tv)
  t_s.wrap_type('wrap_rest'.relocate(self),
                t.Poly(self, tv, t.Arrow(self, [ty], ty)))

expr.macro 'cons':
  ~op_stx self
  let tv = t.gen_tvar(self)
  let ty = t.ListOf(self, tv)
  t_s.wrap_type('wrap_cons'.relocate(self),
                t.Poly(self, tv, t.Arrow(self, [tv, ty], ty)))

expr.macro 'list_get':
  ~op_stx self
  let tv = t.gen_tvar(self)
  t_s.wrap_type('wrap_list_get'.relocate(self),
                t.Poly(self, tv, t.Arrow(self, [t.ListOf(self, tv), t.Num(self)], tv)))

#lang rhombus/static/and_meta
import:
  meta -1:
    rhombus/meta.syntax_meta

export:
  IdMap

class IdMap(table :~ Map):
  internal _IdMap
  private implements:
    Indexable
    Appendable

  fun build([[key :~ Identifier, val], ...]):
    for values (table :~ Map = Map.by(===){}):
      each:
        key: [key, ...]
        val: [val, ...]
      table ++ { key.unwrap(): [Pair(key, val), & table.get(key.unwrap(), [])]}
  
  expression 'IdMap{ $key ...: $val, ...}':
    '_IdMap(build([[$key ..., $val], ...])) :~ IdMap'

  private override get(index :: Identifier):
    let candidates :~ List = table.get(index.unwrap(), [])
    for any:
      each Pair(key, val): candidates
      syntax_meta.equal_binding(key, index) && val

  private override append(other :: IdMap) :~ IdMap:
    _IdMap(for values(table :~ Map = table):
             each (sym, candidates :~ List): other.table
             table ++ { sym: candidates ++ table.get(sym, []) })

  method flatten() :: Map:
    for Map.by(===):
      each (k, ps :~ List): table
      each Pair(key, val): ps
      values(key, val)

  method val_set() :: Set:
    for Set.by(===):
      each (k, ps :~ List): table
      each Pair(_, val): ps
      val

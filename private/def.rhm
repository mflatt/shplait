#lang rhombus/static/and_meta
import:
  meta:
    "type.rhm" as t
    "id_map.rhm" open
  "argument.rhm" open
  "frame.rhm" as f
  "type_statinfo.rhm" as t_s
  "unify.rhm".unify
  "value.rhm".value_meta
  "value.rhm".current_value_tvar_box
  "tuple.rhm"!tuple as tu
  "lazy.rhm" open
  "trace.rhm"!traceable.maybe_wrap_traceable
  "block.rhm".implicit_block
  "denylist.rhm"

export:
  rename:
    define as def

meta:
  fun build_def(self, mutable_tag, [id, ...], [type_seq, ...], rhs):
    Function.pass(denylist.validate(id, "definition"), ...)
    let tvar_box = Box(IdMap{})
    let poly_context = f.get_current_frame().poly_context
    let base_tvars = f.get_current_frame().all_tvars()
    let (ok_poly, val_ty, is_value):
      parameterize { current_value_tvar_box: tvar_box }:
        match mutable_tag
        | '':
            match rhs
            | '$(v :: value_meta.Parsed)' when v.unwrap():
                // the type `v` might be a function type to help
                // with specific mismatch messages
                values(#true, t_s.syntax_to_type(v), #true)
            | ~else:
                values(#false, #false, #false)
        | ~else:
            values(#false, #false, #false)
    let [ty, ...]:
      parameterize { current_value_tvar_box: tvar_box }:
        cond
        | ok_poly:
            let [ty, ...]:
              match val_ty && [type_seq, ...]
              | ['']: [val_ty]
              | ~else: [f.parse_type(type_seq, '', id, tvar_box), ...]
            [t.create_defn(ty,
                           poly_context,
                           base_tvars,
                           IdMap.val_set(tvar_box.value)),
             ...]
        | ~else:
            // non-value on rhs => disallow polymorphism
            [t.as_non_poly(f.parse_type(type_seq, '', id, tvar_box),
                           poly_context,
                           base_tvars),
             ...]
    let [ty_sym, ...] = [t_s.type_to_syntax(ty), ...]
    Function.pass(f.record_frame_defn_type(ty_sym, ty), ...)
    let { tv_id: tv_ty, ... } = IdMap.flatten(tvar_box.value)
    let (tuple_lhs, rhs_delay, infer_id):
      match [id, ...]:
      | [id]: values(id, if is_value | 'values' | 'delay', id)
      | _: values('tu.Tuple([$id, ...])',
                  // force tuple, while tuple construction delays values; this is
                  // not as lazy as it could be, because we could delay the unpacking
                  // of tuples until a variable is used, instead of treating the
                  // definition form as implicitly matching
                  'force',
                  'val')
    let def_rhs:
      '$rhs_delay(dynamic(block:
                            let $infer_id:
                              unify ~defn ($ty_sym, ...):
                                ~init_tvars: [($tv_id, $(t_s.type_to_syntax(tv_ty))), ...]
                                ~defns:«»
                                ~body:
                                  $rhs
                            maybe_wrap_traceable($infer_id, #'$infer_id)))'
    match mutable_tag
    | '':
        '«statinfo.macro '$id': '(($t_s.type_key, $ty_sym))'
          ...
          def $tuple_lhs: $def_rhs»'
    | ~else:
        let [tmp, ...] = [syntax_meta.flip_introduce(id), ...]
        '«expr.macro '$id':
            ~op_stx self
            statinfo_meta.wrap(t_s.wrap_type('$tmp'.relocate(self), t_s.syntax_to_type('$ty_sym')),
                               '((#%assignable, #true))')
          ...
          def $mutable_tag $tmp: $def_rhs
          ...»'

meta:
  syntax_class LHS:
    fields:
      [id, ...]
      [type_seq, ...]
      [op, ...]
      mutable_tag
  | 'values ($(one_arg :: Argument), ...)':
      field [id, ...] = [one_arg.id, ...]
      field [type_seq, ...] = [one_arg.type_seq, ...]
      field [op, ...] = [one_arg.op, ...]
      field mutable_tag = ''
  | '$(tag && 'mutable') $(arg :: Argument)':
      field [id, ...] = [arg.id]
      field [type_seq, ...] = [arg.type_seq]
      field [op, ...] = [arg.op]
      field mutable_tag = 'mutable'.relocate(tag)
  | '$(arg ::Argument)':
      field [id, ...] = [arg.id]
      field [op, ...] = ['']
      field [type_seq, ...] = [arg.type_seq]
      field mutable_tag = ''

defn.macro
| 'define $(lhs :: LHS) $(eql && '=') $rhs':
    ~op_stx self
    ~all_stx stx
    match rhs
    | '':
        syntax_meta.error("expression missing after `=` for definition", stx)
    | '$_ ... $(eql && '=') $_ ...':
        syntax_meta.error("cannot have second `=` for definition", stx, eql)
    | ~else: #void
    build_def(self, lhs.mutable_tag, [lhs.id, ...], [lhs.type_seq, ...], rhs)
| 'define $(lhs :: LHS): $(rhs :: Group)':
    ~op_stx self
    build_def(self, lhs.mutable_tag, [lhs.id, ...], [lhs.type_seq, ...], rhs)
| 'define $(lhs :: LHS): $rhs_body':
    ~op_stx self
    build_def(self, lhs.mutable_tag, [lhs.id, ...], [lhs.type_seq, ...], implicit_block(rhs_body))
| 'define $(name :: Identifier) ($_) $tail ...':
    ~op_stx self
    syntax_meta.error("invalid definition syntax, possibly should be `fun`", self)

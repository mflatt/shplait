#lang rhombus/static/and_meta
import:
  meta:
    "type.rhm" as t
    "id_map.rhm" open
  "type_statinfo.rhm" as t_s

space.enforest type_expr:
  space_path shplait/type
  macro_definer just_macro
  export: macro
  defn.macro
  | '«macro '$('$')$left $(id :: Name) $pat ...': $rhs»':
      '«
         type_expr.just_macro '$('$')$left $id $pat ...': $rhs
         expr.macro '$id':
           ~op_stx self
           type_misuse(self)
       »'
  | '«macro '$(id :: Name) $pat ...': $rhs»':
      '«
         type_expr.just_macro '$id $pat ...': $rhs
         expr.macro '$id':
           ~op_stx self
           type_misuse(self)
       »'
  | 'macro $oops':
      ~op_stx self
      syntax_meta.error("not a supported form", self)
  meta_namespace type_expr_meta:
    description "type"
    reflection space
    parse_syntax_class Parsed
    parse_infix_more_syntax_class AfterInfixParsed
    parsed_packer _pack
    parsed_unpacker _unpack
    identifier_parser: fun(stx): syntax_meta.error("expected a type", stx)
    export:
      pack
      unpack
      XParsed
      XAfterInfixParsed
    fun pack(t :: t.Type):
      let pk = _pack(t_s.type_to_syntax(t))
      if t.src is_a Syntax
      | Syntax.relocate_span(pk, [t.src])
      | pk
    fun unpack(stx):
      t_s.syntax_to_type(_unpack(stx))

meta:
  fun type_misuse(self):
    syntax_meta.error("type form is being used as an expression",
                      self)

  syntax_class XParsed:
    kind: ~group
    fields: xparsed
    root_swap: xparsed group
  | '$(id :: Identifier) $xtail ...':
      def t = current_type_lookup()(id)
      match_when t
      def (xp, tl) = parse_type_from_lookup(id, t, '$xtail ...')
      def xp_all: (match tl
                   | []: xp
                   | ~else:
                       let '$(t :: type_expr_meta.Parsed)': '$xp $tl'
                       t)
      field xparsed = xp_all
  | '$(t :: type_expr_meta.Parsed)':
      field xparsed = force_type(t)

  syntax_class XAfterInfixParsed(op):
    kind: ~group
    fields: xparsed [tail, ...]
    root_swap: xparsed group
  | '$(id :: Identifier) $xtail ...':
      def t = current_type_lookup()(id)
      match_when t
      def (xp, tl) = parse_type_from_lookup(id, t, '$xtail ...')      
      field xparsed = xp
      field [tail, ...] = tl
  | '$(t :: type_expr_meta.AfterInfixParsed(op))':
      field xparsed = force_type(t)
      field [tail, ...] = [t.tail, ...]

  fun parse_type_from_lookup(id, ty_p, '$tail ...',
                             ~nonempty_tail_ok: nonempty_tail_ok = #true):
    let ty = force_type(type_expr_meta.unpack(ty_p))
    match ty
    | ty :: t.Datatype when ty.args.length() != 0:
        match '$id $tail ...':
        | '$_ ($(arg :: XParsed), ...)':
            unless [arg, ...].length() == ty.args.length()
            | syntax_meta.error("wrong number of type arguments\n"
                                  +& "expected count: " +& ty.args.length() +& "\n"
                                  +& "given count: " +& [arg, ...].length() +& "\n",
                                '$id $tail ...')
            values(type_expr_meta.pack(t.at_source(ty with (args = [type_expr_meta.unpack(arg), ...]),
                                                   id)),
                   [])
    | ty :: t.TypeConstructor:
        match '$id $tail ...':
        | '$_ ($(arg :: XParsed), ...)':
            unless [arg, ...].length() == ty.arg_tvars.length()
            | syntax_meta.error("wrong number of type arguments\n"
                                  +& "expected count: " +& ty.arg_tvars.length() +& "\n"
                                  +& "given count: " +& [arg, ...].length() +& "\n",
                                '$id $tail ...')
            values(type_expr_meta.pack(t.at_source(t.instantiate_at(ty.base, [type_expr_meta.unpack(arg), ...]),
                                                   id)),
                   [])
    | ~else:
        unless nonempty_tail_ok || [tail, ...].length() == 0
        | syntax_meta.error("extra terms after type name", '$tail ...')
        let ty = (if ty is_a t.Datatype | t.at_source(ty, id) | ty)
        values(type_expr_meta.pack(ty), [tail, ...])

  fun force_type(ty):
    match ty
    | ty :: t.LazyParseType:
        if ty.thunk_or_type is_a t.Type
        | ty.thunk_or_type
        | when !ty.thunk_or_type
          | syntax_meta.error("cyclic type definition", ty.src)
          let thunk = ty.thunk_or_type
          ty.thunk_or_type := #false  
          let new_ty = thunk()
          ty.thunk_or_type := new_ty
          new_ty
    | ~else ty

export:
  Int
  String
  Char
  Boolean
  Syntax
  Symbol
  Void
  ?
  Listof
  Arrayof
  Boxof
  Mapof
  ->
  only_space type_expr:
    #%parens
    #%literal
    *
    ....

module define:
  export:
    type_expr
    meta:
      type_expr_meta

module parse:
  export:
    meta:
      parse
      current_tvars_box
      force_type

meta:
  def current_tvars_box = Parameter.make(IdMap{})
  def current_type_lookup = Parameter.make(fun (_): #false)
  def current_tvar_lookup = Parameter.make(fun (_): #false)
  
  syntax_class ParsedType:
    fields: type
    kind: ~group
  | '$(tp :: type_expr_meta.XParsed)':
      field type:
        extract_parsed(tp)

  fun extract_parsed(tp):
    match type_expr_meta.unpack(tp)
    | _ :: t.ParenOf:
        syntax_meta.error("parenthesized types without `->` afterward", tp)
    | ty: ty

type_expr.macro 'Int':
  ~op_stx self
  type_expr_meta.pack(t.Num(self))

type_expr.macro 'String':
  ~op_stx self
  type_expr_meta.pack(t.Str(self))

type_expr.macro 'Char':
  ~op_stx self
  type_expr_meta.pack(t.Chr(self))

type_expr.macro 'Boolean':
  ~op_stx self
  type_expr_meta.pack(t.Bool(self))

type_expr.macro 'Symbol':
  ~op_stx self
  type_expr_meta.pack(t.Sym(self))

type_expr.macro 'Syntax':
  ~op_stx self
  type_expr_meta.pack(t.Shrub(self))

type_expr.macro 'Void':
  ~op_stx self
  type_expr_meta.pack(t.Vd(self))

type_expr.macro '? $(id :: Identifier)':
  ~op_stx self
  let tvars_box :: Box = current_tvars_box()
  let tvars :: IdMap = tvars_box.value
  let tv:
    tvars[id]
      || current_tvar_lookup()(id)
      || (block:
            let tv = t.gen_tvar('$self $id')
            tvars_box.value := tvars ++ IdMap{id: tv}
            tv)
  type_expr_meta.pack(tv)

type_expr.macro '....':
  ~op_stx self
  type_expr_meta.pack(t.Datatype(self, Syntax.make_temp_id("....", ~keep_name: #true), []))

type_expr.macro 'Listof ($(elem :: ParsedType))':
  ~op_stx self
  type_expr_meta.pack(t.ListOf(self, elem.type))

type_expr.macro 'Arrayof ($(elem :: ParsedType))':
  ~op_stx self
  type_expr_meta.pack(t.ArrayOf(self, elem.type))

type_expr.macro 'Boxof ($(elem :: ParsedType))':
  ~op_stx self
  type_expr_meta.pack(t.BoxOf(self, elem.type))

type_expr.macro 'Mapof ($(key :: ParsedType), $(val :: ParsedType))':
  ~op_stx self
  type_expr_meta.pack(t.MapOf(self, key.type, val.type))

type_expr.just_macro
| '#%parens ($(elem :: ParsedType))':
    type_expr_meta.pack(elem.type)
| '#%parens $(parens && '()')':
    type_expr_meta.pack(t.TupleOf(parens, []))
| '#%parens $(args && '($(elem :: ParsedType), ...)')':
    ~op_stx self
    type_expr_meta.pack(t.ParenOf(args, [elem.type, ...]))

type_expr.just_macro '#%literal $lit $tail ...':
  syntax_meta.error("literal value is being used as a type", lit)

type_expr.macro '$args -> $(result :: type_expr_meta.XAfterInfixParsed('->')) $()':
  ~op_stx self
  ~associativity ~right
  ~weaker_than *
  let r_ty: extract_parsed(result)
  values(match type_expr_meta.unpack(args)
         | ps :: t.ParenOf:
             type_expr_meta.pack(t.Arrow(self, ps.args, r_ty))
         | t.TupleOf(_, []):
             type_expr_meta.pack(t.Arrow(self, [], r_ty))
         | arg:
             type_expr_meta.pack(t.Arrow(self, [arg], r_ty)),
         '$result.tail ...')

type_expr.macro '$init * $(next :: type_expr_meta.XAfterInfixParsed('*')) $()':
  ~op_stx self
  let init_ty: extract_parsed(init)
  let next_ty: extract_parsed(next)
  recur loop (args = [next_ty, init_ty],
              src = '$init $self $next',
              tail = '$next.tail ...'):
    match tail:
    | ('$op $tail ...' where '$(bound_as type_expr_meta.space: '*')' = op):
        let '$(next :: type_expr_meta.XAfterInfixParsed('*'))' = '$tail ...'
        loop([extract_parsed(next), & args],
             '$src $op $next',
             '$next.tail ...')
    | ~else:
        values(type_expr_meta.pack(t.TupleOf(src, List.reverse(args))),
               tail)

meta:
  fun parse(stx, op, src :: Syntax, tvars_box, lookup_type, lookup_tvar):
    parameterize { current_tvars_box: tvars_box,
                   current_type_lookup: lookup_type,
                   current_tvar_lookup: lookup_tvar}:      
      match stx
      | '':
          match op
          | '': t.gen_tvar(src)
          | ~else: syntax_meta.error("expected a type after separator", op)          
      | '$(t :: ParsedType)':
          t.type

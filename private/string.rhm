#lang rhombus/static/and_meta
import:
  meta:
    "type.rhm" as t
  "type_statinfo.rhm" as t_s
  "wrap.rhm" open
  "lazy.rhm" open

export:
  rename:
    shto_string as to_string
    shstring_append as string_append
  string_length
  string_get

defwrap wrap_string_append string_append(a, b): (dynamic_force(a) :~ String) ++ dynamic_force(b)
defwrap wrap_string_get string_get(a, i): (dynamic_force(a) :~ String)[dynamic_force(i)]
defwrap wrap_string_length string_length(a): (dynamic_force(a) :~ String).length()

// `to_string` doesn't need to force lazy thunks,
// because printing already does that

expr.macro 'shto_string':
  ~op_stx self
  let tv = t.gen_tvar(self)
  t_s.wrap_type('to_string'.relocate(self),
                t.Poly(self, tv, t.Arrow(self, [tv], t.Str(self))))

expr.macro 'shstring_append':
  ~op_stx self
  let str_ty = t.Str(self)
  t_s.wrap_type('wrap_string_append'.relocate(self),
                t.Arrow(self, [str_ty, str_ty], str_ty))

expr.macro 'string_length':
  ~op_stx self
  t_s.wrap_type('wrap_string_length'.relocate(self),
                t.Arrow(self, [t.Str(self)], t.Num(self)))

expr.macro 'string_get':
  ~op_stx self
  t_s.wrap_type('wrap_string_get'.relocate(self),
                t.Arrow(self, [t.Str(self), t.Num(self)], t.Chr(self)))

#lang rhombus/static/and_meta
import:
  meta:
    "type.rhm" as t
  "type_statinfo.rhm" as t_s
  "unify.rhm".unify
  "lazy.rhm" open
  "value.rhm".value

export:
  rename:
    shblock as block
  meta:
    implicit_block

value.non_macro shblock

expr.macro 'shblock:
              $defn
              ...
              $expr':
  ~op_stx self
  ~all_stx stx
  let tv = t.gen_tvar(#false)
  let e:
    '(unify ~expr $(t_s.type_to_syntax(tv)):
        ~init_tvars: []
        ~defns:
          defn_or_delay_void($defn)
          ...           
        ~body: $expr)'
  t_s.wrap_type(e.relocate_span([stx]), tv)

meta:
  fun implicit_block(stx):
    '(shblock: $stx)'.relocate_span([stx])

defn.macro 'defn_or_delay_void($e)':
  match e
  | '$(d :: defn_meta.Group)':
      e
  | ~else:
      '(delay(unify ~expr $(t_s.type_to_syntax(t.BodyVd(#false))):
                ~body:
                  $e))'


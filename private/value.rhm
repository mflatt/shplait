#lang rhombus/static/and_meta
import:
  meta:
    "type.rhm" as t
  "type_statinfo.rhm" as t_s

export:
  value
  meta:
    value_meta
    current_value_tvar_box
    all_value_types

space.transform value:
  space_path shplait/value
  macro_definer macro
  meta_namespace value_meta:
    parse_syntax_class _Parsed
    export Parsed
  export non_macro
  defn.macro 'non_macro $id':
    '«value.macro '$id $('$')_ $('...')': '#false'»'

meta:
  syntax_class Parsed:
    kind: ~group
    root_swap: parsed group
  | '$(x :: value_meta._Parsed)':
      field parsed :: Syntax = x
  | '$(id :: Identifier)':
      field parsed :: Syntax = t_s.type_to_syntax(t.gen_tvar(id))

meta:
  def current_value_tvar_box = Parameter.make(#false)

  fun all_value_types([maybe_val :~ Syntax, ...]):
    for all:
      each maybe_val: [maybe_val, ...]
      maybe_val.unwrap() != #false


#lang rhombus/static/and_meta

import:
  "syntax.rhm"!convert.convert_pat
  "syntax.rhm"!convert.convert_tmpl
  "syntax.rhm"!compile_time.compile_time
  "value.rhm".value
  "export.rhm" as ex
  meta:
    "syntax.rhm"!convert.convert_tmpl
    "syntax.rhm"!compile_time.compile_time
    rhombus/and_meta open
  
export:
  rename:
    shmacro as macro
  meta:
    replace_scopes
    // Exports commented out as part of a workaround for
    // Racket version before v8.10.0.5
    #//
    rename:
      quotes as #%quotes
    #//
    #%parens

defn.macro
| '«shmacro '$(id :: Identifier) $(pat :: Sequence)':
      def $(local_id :: Identifier) = $local_expr
      ...      
      '$tmpl'»':
    def [c_pat, _] = convert_pat('$pat', #false)
    def [c_tmpl, _] = convert_tmpl(tmpl, #false)
    ex.add_export(id)
    '«expr.macro '$id $c_pat':
        def $local_id = $(compile_time(local_expr))
        ...
        '$c_tmpl'
      value.non_macro $id»'
| '«shmacro '$('$') $(left :: Identifier) $(op :: Operator) $(pat :: Sequence)':
      def $(local_id :: Identifier) = $local_expr
      ...
      '$tmpl'»':
    ~all_stx stx
    def [c_pat, _] = convert_pat('$pat', #false)
    def [c_tmpl, _] = convert_tmpl(tmpl, #false)
    ex.add_export(op)
    '«expr.macro '$('$') $left $op $c_pat':
        ~stronger_than: ~other
        def $local_id = $(compile_time(local_expr))
        ...
        '$c_tmpl'
      value.non_macro $op»'
| '«shmacro
    | '$(id :: Identifier) $(pat :: Sequence)':
        def $(local_id :: Identifier) = $local_expr
        ...      
        '$tmpl'
    | ...»':
    ~all_stx stx
    def [id0, _, ...] = [id, ...]
    for (id: [id, ...]):
      unless (id.unwrap() == id0.unwrap())
      | syntax_meta.error("identifier does not match the first case's identifier", stx, id)
    def [[c_pat, _], ...] = [convert_pat('$pat', #false), ...]
    def [[c_tmpl, _], ...] = [convert_tmpl(tmpl, #false), ...]
    ex.add_export(id0)
    '«expr.macro
      | '$id $c_pat':
          def $local_id = $(compile_time(local_expr))
          ...
          '$c_tmpl'
      | ...
      value.non_macro $id0»'
| '«shmacro
    | '$('$') $(left :: Identifier) $(op :: Operator) $(pat :: Sequence)':
        def $(local_id :: Identifier) = $local_expr
        ...
        '$tmpl'
    | ...»':
    ~all_stx stx
    def [op0, _, ...] = [op, ...]
    for (op: [op, ...]):
      unless (op.unwrap_op() == op0.unwrap_op())
      | syntax_meta.error("operator does not match the first case's operator", stx, op)
    def [[c_pat, _], ...] = [convert_pat('$pat', #false), ...]
    def [[c_tmpl, _], ...] = [convert_tmpl(tmpl, #false), ...]
    ex.add_export(op0)
    '«expr.macro $op0:
        ~stronger_than: ~other
      | '$('$') $left $op $c_pat':
          def $local_id = $(compile_time(local_expr))
          ...
          '$c_tmpl'
      | ...
      value.non_macro $op0»'

meta:
  expr.macro 'replace_scopes($stx, $like_stx)':
    'Syntax.replace_scopes($(compile_time(stx)), $(compile_time(like_stx)))'
  expr.macro '«quotes '$tmpl'»':
    def [c_tmpl, _] = convert_tmpl(tmpl, #false)
    '«'$c_tmpl'»'

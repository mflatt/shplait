#lang rhombus/static/and_meta
import:
  meta:
    "type.rhm" as t
  "frame.rhm" as f
  "type_statinfo.rhm" as t_s
  "lazy.rhm" open
  "wrap.rhm" open

decl.macro 'def_binary
              $name
              $(pattern:
                  kind ~sequence
                | '$rhm_op as $sh_op'
                | '$(rhm_op && sh_op)')
              $type_constr:
                $option
                ...':
  '«export: rename: $name as $sh_op
    expr.macro '$('$')left $name $('$')right':
      ~op_stx self
      ~all_stx stx
      $option
      ...
      let [left_ty, new_left] = t_s.lookup_type(left, #false)
      let [right_ty, new_right] = t_s.lookup_type(right, #false)
      t.unify_do(left, left_ty, t.Num(self))
      t.unify_do(right, right_ty, t.Num(self))
      t_s.wrap_type('force($('$')new_left) $('$')('$rhm_op'.relocate(self)) force($('$')new_right)',
                    t. $type_constr(stx))»'

def_binary shplus + Num:
  ~weaker_than shtimes shdiv shmod
  ~same_as shminus
def_binary shtimes * Num:
  ~same_on_left_as shdiv shmod
operator n / d: n div d
def_binary shdiv / Num:«»
def_binary shmod mod Num:«»

export: rename: shminus as -
expr.macro
| '$left shminus $right':
    ~op_stx self
    ~all_stx stx
    ~weaker_than shtimes shdiv shmod
    let [left_ty, new_left] = t_s.lookup_type(left, #false)
    let [right_ty, new_right] = t_s.lookup_type(right, #false)
    t.unify_do(left, left_ty, t.Num(self))
    t.unify_do(right, right_ty, t.Num(self))
    t_s.wrap_type('force($new_left) $('-'.relocate(self)) force($new_right)',
                  t.Num(stx))
| 'shminus $right':
    ~op_stx self
    ~all_stx stx
    ~weaker_than shtimes shdiv shmod
    let [right_ty, new_right] = t_s.lookup_type(right, #false)
    t.unify_do(right, right_ty, t.Num(self))
    t_s.wrap_type('$('-'.relocate(self)) force($new_right)',
                  t.Num(stx))

def_binary shlt .< as < Bool:
  ~weaker_than shplus shminus shtimes shdiv shmod
def_binary shgt .> as > Bool:
  ~weaker_than shplus shminus shtimes shdiv shmod
def_binary shle .<= as <= Bool:
  ~weaker_than shplus shminus shtimes shdiv shmod
def_binary shge .>= as >= Bool:
  ~weaker_than shplus shminus shtimes shdiv shmod

export: rename: _not as !
expr.macro '_not $right':
  ~op_stx self
  ~all_stx stx
  let [right_ty, new_right] = t_s.lookup_type(right, #false)
  t.unify_do(right, right_ty, t.Bool(self))
  t_s.wrap_type('! force($new_right)', t.Bool(stx))

decl.macro 'def_equality $op $as_op':
  '«export: rename: equals as $op
    expr.macro '$('$')left equals $('$')right':
      ~op_stx self
      ~all_stx stx
      ~weaker_than shplus shminus shtimes shdiv shmod
      let tv = t.gen_tvar(self)
      let [left_ty, new_left] = t_s.lookup_type(left, #false)
      let [right_ty, new_right] = t_s.lookup_type(right, #false)
      t.unify_do(left, left_ty, tv)
      t.unify_do(right, right_ty, tv)
      t_s.wrap_type('force_all($('$')new_left) $('$')('$as_op'.relocate(self)) force_all($('$')new_right)',
                    t.Bool(self))»'

def_equality == is_now
def_equality != !=
def_equality === ===

export:
  rename:
    shand as &&
    shor as ||

meta:
  fun parse_bool(left, right, self, op :: Syntax):
    let bool = t.Bool(self)
    let [left_ty, new_left] = t_s.lookup_type(left, #false)
    let [right_ty, new_right] = t_s.lookup_type(right, #false)
    t.unify_do(self, left_ty, bool)
    t.unify_do(self, right_ty, bool)
    t_s.wrap_type('force($new_left) $(op.relocate(self)) force($new_right)',
                  bool)

expr.macro '$left shand $right':
  ~op_stx self
  ~stronger_than: shor
  ~weaker_than: ~other
  parse_bool(left, right, self, '&&')

expr.macro '$left shor $right':
  ~op_stx self
  ~weaker_than: ~other
  parse_bool(left, right, self, '||')

export: rename: concat as +&
expr.macro '$left concat $right':
  ~op_stx self
  t_s.wrap_type('force($left) $('+&'.relocate(self)) force($right)',
                t.Str(self))

export:
  rename:
    shmin as min
    shmax as max

defwrap wrap_min min(a, b): math.min(dynamic_force(a), dynamic_force(b))
defwrap wrap_max max(a, b): math.max(dynamic_force(a), dynamic_force(b))

expr.macro 'shmin':
  ~op_stx self
  t_s.wrap_type('wrap_min', self, t.Arrow(self, [t.Num(self), t.Num(self)], t.Num(self)))
expr.macro 'shmax':
  ~op_stx self
  t_s.wrap_type('wrap_max', self, t.Arrow(self, [t.Num(self), t.Num(self)], t.Num(self)))

#lang rhombus/static/and_meta
import:
  meta:
    "type.rhm" as t
  "type_statinfo.rhm" as t_s
  "lazy.rhm" open
  "wrap.rhm" open
  "value.rhm".value
  "list.rhm"!rep.to_slist
  "list.rhm"!rep.from_slist
  lib("shrubbery/parse.rkt").#{parse-all}

// Wrap Rhombus's syntax patterns and templates to check
// types, which means our own layer of repetition binding.
// Repetitions from syntax patterns can only be used
// in syntax templates (i.e., no generalized repetition forms)

export:
  rename:
    shquotes as #%quotes
  only_space expr:
    $
  syntax_split
  syntax_join
  syntax_read
  // more exports macro-generated for `syntax_is_integer`, etc.

class SyntaxWrap(raw :: Syntax):
  private implements Printable
  private override describe(mode, recur):
    recur(raw, ~mode: mode)
  private implements Equatable
  private override equals(other :~ SyntaxWrap, recur):
    recur(raw.unwrap_all(), other.raw.unwrap_all())
  private override hash_code(recur):
    recur(raw.unwrap_all())  
  
module convert:
  export:
    meta:
      convert_pat
      convert_tmpl
    syntax_def
    syntax_unwrap

module compile_time:
  export:
    meta:
      compile_time

value.non_macro shquotes

expr.macro '«shquotes $(quoted_tmpl && '«'$tmpl'»')»':
  ~op_stx self
  let [tmpl_cvt, [[id, tmp_id, depth], ...]] = convert_tmpl(tmpl, #true)
  t_s.wrap_type('«SyntaxWrap(
                    block:
                      def $(nest_rep(tmp_id, depth)) = reference_syntax_pattern_var($id, $depth)
                      ...
                      #%quotes '$tmpl_cvt'
                    )»',
                quoted_tmpl,
                t.Shrub(quoted_tmpl))

meta:
  fun convert(pat, extract_escape_id, handle_id, handle_escape, use_temps):
    fun group(pat, depth, is_before_dots):
      fun dots(hd, tl):
        let [tm_pat_cvt, tm_ids] = group(hd, depth+1, #true)
        let [g_pat_cvt, g_ids] = group(tl, depth, #false)
        ['$tm_pat_cvt $('...') $g_pat_cvt', [&tm_ids, &g_ids]]
      match pat:
      | '':
          ['', []]
      | '$(op && '...') $_ ...':
          syntax_meta.error("misplaced ellipses", op)
      | '$(op && '$') $id $('...') $tail ...':
          dots('$op $id', '$tail ...')
      | '$tm $('...') $tail ...':
          dots(tm, '$tail ...')
      | '$(op && '$') $expr $tail ...' when handle_escape && (depth == 0):
          let [pat_cvt, ids] = group('$tail ...', depth, is_before_dots)
          ['$(Syntax.relocate('$', op)) $(handle_escape(expr)) $pat_cvt', ids]
      | '$(op && '$') $id_esc $tail ...':
          def id = extract_escape_id(id_esc, depth)
          let [pat_cvt, ids] = group('$tail ...', depth, is_before_dots)
          let tmpl = if use_temps | Syntax.make_temp_id(id) | id
          ['$(Syntax.relocate('$', op)) $(handle_id(tmpl, id_esc, is_before_dots)) $pat_cvt',
           [[id, tmpl, depth], &ids]]
      | '$(op && '$') $_ ...':
          syntax_meta.error("misplaced escape", op)
      | '| $alt | ...':
          let ['$pat; ...', ids] = multi('$alt ; ...', depth)
          ['| $pat | ...', ids]
      | '$tm $tail ...':
          let [tm_cvt, tm_ids] = term(tm, depth)
          let [pat_cvt, ids] = group('$tail ...', depth, is_before_dots)
          ['$tm_cvt $pat_cvt', [& tm_ids, & ids]]
    fun multi(pat, depth):
      match pat
      | '': ['', []]
      | '$(g :: Group)': group(pat, depth, #false)
      | '$g; $('...'); $tail; ...':
          let [g_pat_cvt,  g_ids] = group('$g', depth+1, #false)
          let [m_pat_cvt, m_ids] = multi('$tail; ...', depth)
          ['$g_pat_cvt; $('...'); $m_pat_cvt', [&g_ids, &m_ids]]
      | '$g; $tail; ...':
          let [g_pat_cvt, g_ids] = group('$g', depth, #false)
          let [m_pat_cvt, m_ids] = multi('$tail; ...', depth)
          ['$g_pat_cvt; $m_pat_cvt', [&g_ids, &m_ids]]      
    fun term(pat, depth):
      fun rebind(new):
        // need to preserve binding of tag
        let [tag, c, ...] = Syntax.unwrap(new)
        let [orig_tag, orig_c, ...] = Syntax.unwrap(pat)
        Syntax.make([orig_tag, c, ...])
      match pat
      | '($m)':
          let [m_pat_cvt, m_ids] = multi(m, depth)
          [rebind('($m_pat_cvt)'), m_ids]
      | '[$m]':
          let [m_pat_cvt, m_ids] = multi(m, depth)
          [rebind('[$m_pat_cvt]'), m_ids]
      | '{$m}':
          let [m_pat_cvt, m_ids] = multi(m, depth)
          [rebind('{$m_pat_cvt}'), m_ids]
      | '«'$m'»':
          let [m_pat_cvt, m_ids] = multi(m, depth)
          [rebind('«'$m_pat_cvt'»'), m_ids]
      | ': $m':
          let [m_pat_cvt, m_ids] = multi(m, depth)
          [rebind(': $m_pat_cvt'), m_ids]
      | '| $m
         | ...':
          let [[m_pat_cvt, m_ids], ...] = [multi(m, depth), ...]
          ['| $m_pat_cvt
            | ...',
           List.append(m_ids, ...)]
      | ~else:
          [pat, []]
    match pat:
    | '...': [pat, []]
    | '$': [pat, []]
    | ~else multi(pat, 0)
  fun convert_pat(pat, use_temps):
    convert(pat,
            fun (id_esc, depth):
              match id_esc
              | '($(id :: Identifier) :: Identifier)':
                  id
              | ~else:
                  unless id_esc is_a Identifier
                  | syntax_meta.error("expected an identifier after `$` (possibly in parentheses with `:: Identifier`)",
                                      id_esc)
                  id_esc,
            fun (id, id_esc, is_before_dots):
              cond
              | !(id_esc is_a Identifier): '($id :: Identifier)'
              | is_before_dots: id
              | ~else: '($id :: Sequence)',
            #false,
            use_temps)
  fun convert_tmpl(pat, use_temps):
    convert(pat,
            fun (id, depth):
              unless id is_a Identifier
              | syntax_meta.error("expected an identifier after `$` at ellipsis depth " +& depth,
                                  id)
              id,
            fun (id, id_esc, is_before_dots): id,
            if use_temps
            | (fun (expr): '(reference_syntax($expr))')
            | (fun (expr): compile_time(expr)),
            use_temps)

meta:
  // A workaround for Racket v8.10.0.4 and earlier
  // to avoid exporting different phase-0 and phase-1
  // bindings for the same name
  fun compile_time(stx):
    match stx
    | '«'$tmpl'»':
         def [c_tmpl, _] = convert_tmpl(tmpl, #false)
         '«'$c_tmpl'»'
    | '($exp)':
        '($(compile_time(exp)))'
    | ~else: stx

syntax_class Sequence
| '$(_ :: Term) $(_ :: Term) ...'

// for using the result of `convert_pat` in `macro`
meta:
  syntax_class Sequence
  | '$(_ :: Term) $(_ :: Term) ...'

expr.macro 'reference_syntax($(arg :: expr_meta.Parsed))':
  let [arg_ty, new_arg] = t_s.lookup_type(arg, arg.group)
  t.unify_do(arg, arg_ty, t.Shrub(arg))
  'check_single_group(force($new_arg))'

fun check_single_group(stx_in):
  let stx = SyntaxWrap.raw(stx_in)
  unless stx is_a Group
  | error("syntax object does not have a single group\n"
            +& "  syntax object: " +& stx) // FIXME: print syntax object as value
  stx

space.transform syntax_var:
  space_path shplait/syntax_var
  macro_definer macro
  meta_namespace syntax_var_meta:
    parse_syntax_class Parsed

meta:
  fun misuse_of_pattern_variable(id):
    syntax_meta.error("misuse of syntax variable (outside of quotes)", id)

fun syntax_unwrap(stx):
  SyntaxWrap.raw(stx)

defn.macro 'syntax_def $id: $pat_id $depth':
  '«
     expr.macro '$id':
       ~op_stx self
       $(if depth.unwrap() == 0
         | 't_s.wrap_type('SyntaxWrap($pat_id)', t.Shrub(self))'
         | 'misuse_of_pattern_variable(self)')
     syntax_var.macro '$id':
       '($pat_id, $depth)'
    »'

meta:
  fun nest_rep(e, depth):
    if depth == 0
    | e
    | '[$(nest_rep(e, depth-1)), $('...')]'

expr.macro 'reference_syntax_pattern_var($id, $depth)':
  match id
  | '$(d :: syntax_var_meta.Parsed)':
      let '($pat_id, $pat_id_depth)' = d
      unless depth.unwrap() == pat_id_depth.unwrap()
      | syntax_meta.error("syntax variable is used at the wrong ellipsis depth\n"
                            +& "  used at depth: " +& depth +& "\n"
                            +& "  allowed only at depth: " +& pat_id_depth,
                          id)
      nest_rep(pat_id, depth.unwrap())
  | ~else:
      syntax_meta.error("identifier after `$` is not a syntax variable",
                        id)

fun oops(who, stx, what):
  error(who, "syntax object does not wrap a " +& what +& "\n"
               +& "  syntax object: " +& stx)

defwrap wrap_syntax_split syntax_split(s):
  let s = SyntaxWrap.raw(dynamic_force(s))
  if s is_a Group
  | to_slist(Syntax.unwrap_group(s).map(SyntaxWrap))
  | to_slist(Syntax.unwrap_sequence(s).map(SyntaxWrap))

defwrap wrap_syntax_join syntax_join(lst):
  let [s :: Syntax, ...] = List.map(dynamic_force_all(from_slist(lst)), SyntaxWrap.raw)
  cond
  | (for all:
       each s: [s, ...]
       s is_a Term):
      SyntaxWrap(Syntax.make_group([s, ...]))
  | ~else:
      SyntaxWrap(Syntax.make_sequence(List.append(&[s.unwrap_sequence(), ...])))
  

expr.macro 'syntax_split':
   ~op_stx self
   t_s.wrap_type('wrap_syntax_split', t.Arrow(self, [t.Shrub(self)], t.ListOf(self, t.Shrub(self))))

expr.macro 'syntax_join':
   ~op_stx self
   t_s.wrap_type('wrap_syntax_join', t.Arrow(self, [t.ListOf(self, t.Shrub(self))], t.Shrub(self)))

decl.nestable_macro 'extractor $is_x ($unwrap_x, $post_unwrap) ($wrap_x, $pre_wrap) $Ty $Ann $what':
  '«
     export: $is_x $unwrap_x $wrap_x
     defwrap stx_is_x $is_x(stx_in):
       let stx = SyntaxWrap.raw(dynamic_force(stx_in))
       (stx is_a Term) && (stx.unwrap() is_a $Ann)
     defwrap stx_unwrap_x $unwrap_x(stx_in):
       let stx = SyntaxWrap.raw(dynamic_force(stx_in))
       let v = if stx is_a Term | stx.unwrap() | #'~no
       if v is_a $Ann | $post_unwrap(v) | oops(#'$unwrap_x, stx, $what)
     defwrap stx_wrap_x $wrap_x(v_in):
       let v = dynamic_force_all(v_in)
       SyntaxWrap(Syntax.make($pre_wrap(v)))
     expr.macro '$is_x':
       ~op_stx self
       t_s.wrap_type('stx_is_x'.relocate(self), t.Arrow(self, [t.Shrub(self)], t.Bool(self)))
     expr.macro '$unwrap_x':
       ~op_stx self
       t_s.wrap_type('stx_unwrap_x'.relocate(self), t.Arrow(self, [t.Shrub(self)], t . $Ty(self)))
     expr.macro '$wrap_x':
       ~op_stx self
       t_s.wrap_type('stx_wrap_x'.relocate(self), t.Arrow(self, [t . $Ty(self)], t.Shrub(self)))
   »'
extractor syntax_is_integer (syntax_to_integer, values) (integer_to_syntax, values) Num Int "integer"
extractor syntax_is_boolean (syntax_to_boolean, values) (boolean_to_syntax, values) Bool Boolean "boolean"  
extractor syntax_is_symbol (syntax_to_symbol, values) (symbol_to_syntax, values) Sym Symbol "symbol"
extractor syntax_is_string (syntax_to_string, values) (string_to_syntax, values) Str String "symbol"
extractor syntax_is_list (syntax_to_list, list_post) (list_to_syntax, add_brackets) ListOfShrub ListShaped "list"

fun list_post(los):
  to_slist(List.rest(los).map(SyntaxWrap))

annot.macro 'ListShaped':
  'matching(['brackets', _, $'...'])'
fun add_brackets(lst): [#'brackets, & from_slist(lst).map(fun (elem): SyntaxWrap.raw(elem))]


defwrap syntax_read_wrap syntax_read():
  let stx = #{parse-all}(Port.Input.current())
  // need to remove `top`
  SyntaxWrap(Syntax.make_sequence(List.rest(Syntax.unwrap(stx))))
  
expr.macro 'syntax_read':
  ~op_stx self
  t_s.wrap_type('syntax_read_wrap', t.Arrow(self, [], t.Shrub(self)))

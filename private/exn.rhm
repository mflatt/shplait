#lang rhombus/static/and_meta
import:
  meta:
    "type.rhm" as t
  "type_statinfo.rhm" as t_s
  "wrap.rhm" open
  "lazy.rhm" open
  "unify.rhm" open
  "block.rhm".implicit_block
  lib("racket/base.rkt").#{call/cc}
  "value.rhm".value

export:
  rename:
    shtry as try
    sherror as error
    shprint as print
    shprintln as println
  let_cc

value.non_macro shtry
value.non_macro let_cc

expr.macro 'shtry:
              $body
              ~catch:
                $(handler :: Group)':
  let tv = t.gen_tvar(#false)
  t_s.wrap_type('try:
                   unify ~expr $(t_s.type_to_syntax(tv)):
                     ~body:
                       $body
                   ~catch _ :: Exn.Fail:
                     unify ~expr $(t_s.type_to_syntax(tv)):
                       ~body:
                         $handler',
                tv)

expr.macro 'let_cc $(id :: Identifier):
              $body':
  let tv = t.gen_tvar(#false)
  let any_tv = t.gen_tvar(#false)
  let k_ty = t.Poly(#false, any_tv, t.Arrow(id, [tv], any_tv))
  let tmp = Syntax.make_temp_id(id)
  t_s.wrap_type('«capture_noncomposable $tmp:
                    def $id = dynamic($tmp)
                    statinfo.macro '$id':
                      '(($t_s.type_key, $(t_s.type_to_syntax(k_ty))))'                      
                    unify ~expr $(t_s.type_to_syntax(tv)):
                      ~body:
                        $(implicit_block(body))»',
                tv)

expr.macro 'capture_noncomposable $id: $body':
  '#{call/cc}(fun ($id): $body)'

defwrap wrap_error error(sym, str): error(~who: dynamic_force(sym),
                                          dynamic_force(str))
// `print` and `println` don't need forcing wrappers of lazy thunks,
// because printing already does that

expr.macro 'sherror':
  ~op_stx self
  let tv = t.gen_tvar(self)
  t_s.wrap_type('wrap_error'.relocate(self),
                t.Poly(self, tv, t.Arrow(self, [t.Sym(self), t.Str(self)], tv)))

expr.macro 'shprint':
  ~op_stx self
  let tv = t.gen_tvar(self)
  t_s.wrap_type('print'.relocate(self),
                t.Poly(self, tv, t.Arrow(self, [tv], t.Vd(self))))

expr.macro 'shprintln':
  ~op_stx self
  let tv = t.gen_tvar(self)
  t_s.wrap_type('println'.relocate(self),
                t.Poly(self, tv, t.Arrow(self, [tv], t.Vd(self))))

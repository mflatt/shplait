#lang rhombus/static/and_meta
import:
  meta:
    "type.rhm" as t
    "id_map.rhm" open
  "argument.rhm" open
  "frame.rhm" as f
  "type_statinfo.rhm" as t_s
  "type_expr.rhm"!define.type_expr  
  "type_expr.rhm"!define.type_expr_meta
  "type_expr.rhm"!parse.current_tvars_box
  "type_defn.rhm".type_defn  
  "type_defn.rhm".type_defn_meta
  "pattern.rhm".pattern
  "pattern.rhm".pattern_meta
  "value.rhm".value
  "value.rhm".value_meta
  "value.rhm".all_value_types
  "lazy.rhm" open
  "denylist.rhm"

export:
  type

meta:
  syntax_class MaybeArgs:
    kind ~sequence
    fields:
      [arg, ...]
  | '':
      field [arg, ...] = []
  | '($arg, ...)'

type_defn.macro
| 'type $(id :: Identifier) $(args :: MaybeArgs) $(op && '=') $ty_e0 $ty_e ...':
    ~op_stx self
    denylist.validate(id, "type")
    let tvar_box = Box(IdMap{})
    let arg_tys :~ List = parse_arg_types([args.arg, ...], self, args, tvar_box)
    let type_thunk = (fun ():
                        let ty = f.parse_type('$ty_e0 $ty_e ...', op, self, tvar_box)
                        if arg_tys.length() == 0
                        | ty
                        | t.TypeConstructor(#false, t.poly_ize(ty, arg_tys), arg_tys))
    type_defn_meta.pack(id, t.LazyParseType(#false, arg_tys, type_thunk), tvar_box.value)
| 'type $(id :: Identifier) $(args :: MaybeArgs) ~opaque':
    ~op_stx self
    denylist.validate(id, "type")
    let tvar_box = Box(IdMap{})
    let arg_tys :~ List = parse_arg_types([args.arg, ...], self, args, tvar_box)
    let dty = t.OpaqueDatatype(#false, id, arg_tys, '(fun (x): #true)')
    type_defn_meta.pack(id, dty, tvar_box.value)
| 'type $(id :: Identifier) $(args :: MaybeArgs)
   | $_
   | ...':
    ~op_stx self
    denylist.validate(id, "type")
    let tvar_box = Box(IdMap{})
    let arg_tys :~ List = parse_arg_types([args.arg, ...], self, args, tvar_box)
    let dty = t.Datatype(#false, id, arg_tys)
    type_defn_meta.pack(id, dty, tvar_box.value)
| 'type $_ ...':
    type_defn_meta.pack_nothing()

decl.macro
| 'type $(id :: Identifier) $(args :: MaybeArgs) = $ty_e ...':
    let (ty, tvars) = f.lookup_found_type_definition(id)
    match ty
    | ty :: t.TypeConstructor:
        let [arg_tvar, ...] = ty.arg_tvars
        let [arg_g_id, ...] = [Syntax.make_temp_id(arg_tvar), ...]
        let ty_sym = t_s.type_to_syntax(ty.base)
        f.record_frame_defn_type(ty_sym, ty.base)
        '«type_expr.macro '$id($('$')$arg_g_id, ...)':
              type_expr_meta.pack(instantiate_alias('$ty_sym', [$arg_g_id, ...]))»'
    | ~else:
        let ty_sym = t_s.type_to_syntax(ty)
        f.record_frame_defn_type(ty_sym, ty)    
        '«type_expr.macro '$id':
            type_expr_meta.pack(t_s.syntax_to_type('$ty_sym'))»'
| 'type $(id :: Identifier) $(args :: MaybeArgs) ~opaque':
    let (ty :~ t.OpaqueDatatype, tvars) = f.lookup_found_type_definition(id)
    match ty.args    
    | []:
        let ty_sym = t_s.type_to_syntax(ty)
        f.record_frame_defn_type(ty_sym, ty)    
        '«type_expr.macro '$id':
            type_expr_meta.pack(t_s.syntax_to_type('$ty_sym'))»'
    | [arg_tvar, ...]:
        let ty_sym = t_s.type_to_syntax(ty)
        let [arg_g_id, ...] = [Syntax.make_temp_id(arg_tvar), ...]
        f.record_frame_defn_type(ty_sym, ty)
        '«type_expr.macro '$id($('$')$arg_g_id, ...)':
            ~op_stx self
            type_expr_meta.pack(t.at_source(instantiate_datatype('$ty_sym', [$arg_g_id, ...]), self))»'
| 'type $(id :: Identifier) $(args :: MaybeArgs)
   | $(var_id :: Identifier) ($(field :: TypedArgument), ...)
   | ...':
    Function.pass(denylist.validate(var_id, "variant"), ...)
    Function.pass(denylist.validate(field.id, "field"), ..., ...)
    let (dty :: t.Datatype, tvars) = f.lookup_found_type_definition(id)
    let tvar_box = Box(tvars)
    let arg_tys = dty.args
    let [arg_ty, ...] = arg_tys
    let [[field_ty, ...], ...] = [[f.parse_type(field.type_seq, field.op, field.id, tvar_box), ...], ...]
    let [var_tmp_id, ...] = [Syntax.make_temp_id(var_id), ...]
    let [var_ty, ...] = [t.poly_ize(t.Arrow(#false, [field_ty, ...], dty), arg_tys), ...]
    let [var_ty_sym, ...] = [t_s.type_to_syntax(var_ty), ...]
    Function.pass(f.record_frame_defn_type(var_ty_sym, var_ty), ...)
    let dty_sym = t_s.type_to_syntax(dty)
    f.record_frame_defn_type(dty_sym, dty)
    let [[var_field_ty, ...], ...] = [[t.poly_ize_upto(t.Arrow(field.id, [dty], field_ty), arg_tys, field.type_seq), ...], ...]
    let [[var_field_ty_sym, ...], ...] = [[t_s.type_to_syntax(var_field_ty), ...], ...]
    Function.pass(f.record_frame_defn_type(var_field_ty_sym, var_field_ty), ..., ...)
    let ([[var_tmp_id_x, ...], ...], // workaround nested `...` mismatch
         [[var_id_x, ...], ...]):
      fun dup(v, ls :~ List): ls.map(fun (_): v)
      values([dup(var_tmp_id, [field.id, ...]), ...],
             [dup(var_id, [field.id, ...]), ...])
    let [[field_id_accessor, ...], ...] = [[Syntax.make_id(var_id_x +& "." +& field.id), ...], ...]
    let dt_arg_len = arg_tys.length()
    '«namespace ~open:
        class $id():
          nonfinal
          expression: ~none
          reconstructor: ~none
        class $var_id($field.id, ...):
          extends $id
          reconstructor: ~none
          implements Forceable
          override force_all():
            $var_id(dynamic_force_all($field.id), ...)
        ...
        export:
          rename: $var_id as $var_tmp_id
          ...
      $(if [arg_ty, ...] == []
        | '«type_expr.macro '$id':
              ~op_stx self
              type_expr_meta.pack(t.at_source(t_s.syntax_to_type('$dty_sym'), self))»'
        | let [arg_g_id, ...] = [Syntax.make_temp_id(arg_ty), ...]
          '«type_expr.macro '$id($('$')$arg_g_id, ...)':
              ~op_stx self
              type_expr_meta.pack(t.at_source(instantiate_datatype('$dty_sym', [$arg_g_id, ...]), self))»')
      expr.macro '$var_id':
        ~op_stx self
        t_s.wrap_type('$var_tmp_id'.relocate(self),
                      t_s.syntax_to_type('$var_ty_sym'))
      ...
      namespace $var_id:
        export:
          $field.id
          ...
        fun $field_id_accessor(v):
          $(var_tmp_id_x) . $(field.id) (force(v))
        ...
        expr.macro '$field.id':
          ~op_stx self
          t_s.wrap_type('$field_id_accessor'.relocate(self),
                        t_s.syntax_to_type('$var_field_ty_sym'))
        ...
      ...
      pattern.macro '$id':
        pattern_meta.pack_type(['$var_id', ...])
      pattern.macro '$var_id':
        pattern_meta.pack('($id,
                            $dt_arg_len,
                            $var_tmp_id,
                            $var_ty_sym)')
      ...
      value.macro '$var_id $('$') tail $('...')':
        parse_constructor_app_value('$dty_sym', '$('$') tail $('...')', $([field.id, ...].length()))
      ...
      »'

meta:
  fun parse_arg_types([arg_g, ...], self, args, tvars_box):
    when args == []
    | syntax_meta.error("empty parenthesized sequence of type variables not allowed", self, args)
    for List:
      each arg_g: [arg_g, ...]
      match arg_g
      | '? $(id :: Identifier)':
          f.parse_type(arg_g, '', self, tvars_box)
      | ~else:
          syntax_meta.error("expected a type variable", self, arg_g)

  fun instantiate_datatype(ty_sym, [arg_g, ...]):
    match t_s.syntax_to_type(ty_sym)
    | dt :: t.Datatype:
        let tvars_box = current_tvars_box()
        dt with (args = [f.parse_type(arg_g, '', arg_g, tvars_box),
                         ...])

  fun instantiate_alias(ty_sym, [arg_g, ...]):
    let tvars_box = current_tvars_box()
    t.instantiate_at(t_s.syntax_to_type(ty_sym),
                     [f.parse_type(arg_g, '', arg_g, tvars_box),
                      ...])

  fun parse_constructor_app_value(dty_sym, tail, arg_n):
    match tail
    | '($arg, ...) $tail ...':
        let dty :: t.Datatype = t_s.syntax_to_type(dty_sym)
        cond
        | arg_n != [arg, ...].length():
            '#false'
        | ~else:
            match '($arg, ...)':
            | '($(v :: value_meta.Parsed), ...)' when all_value_types([v, ...]):
                dty_sym
            | ~else:
                '#false'
    | ~else: '#false'

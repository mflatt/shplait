#lang rhombus/static/and_meta
import:
  meta:
    "id_map.rhm" open
    "type.rhm" as t
  "type_statinfo.rhm" as t_s
  "type_expr.rhm"!parse as tyex
  "type_expr.rhm"!define.type_expr_meta
  "type_defn.rhm".type_defn_meta
  "lazy.rhm"

export:
  meta:
    Frame
    configure_language
    find_type_definitions
    lookup_found_type_definition
    get_current_frame
    parse_type
    finish_current_frame
    record_frame_defn_type
    build_register_defn_types
    interaction_type_string
    register_submodule
    get_submodules
  relet_frame

meta:
  class Frame(mutable type_defns :~ IdMap = IdMap{},
              mutable defn_types :~ List = [],
              mutable final_defn_types :~ List = [],
              ~parent: mutable parent :: maybe(Frame) = #false,
              mutable children :: List = [],
              ~poly_context: mutable poly_context :: List,
              ~tvars: mutable tvars :~ IdMap = IdMap{},
              mutable submods :~ List = []):
    constructor(~parent: parent = #false,
                ~tvars: tvars = IdMap{}):
      let fr = super(~parent: parent,
                     ~poly_context: [Symbol.gen("poly"),
                                     & (if parent
                                        | Frame.poly_context(parent)
                                        | [])],
                     ~tvars: tvars)
      when parent
      | let parent :: Frame = parent
        parent.children := [fr, &parent.children]
      fr

    method all_tvars() :: Set:
      let base:
        if parent
        | Frame.all_tvars(parent)
        | Set{}
      (base :~ Set) ++ tvars.val_set()

syntax_parameter.bridge frame: Frame()

defn.macro 'relet_frame: $expr':
  'syntax_parameter.relet frame: $expr'

meta:
  fun get_current_frame() :~ Frame:
    syntax_parameter_meta.lookup('frame')

  fun get_current_type():
    let v = syntax_parameter_meta.lookup('tvar')
    v || t.gen_tvar(#false)

  fun configure_language(is_lazy, is_accomodating):
    lazy.set_is_lazy(is_lazy, is_accomodating)

  fun find_type_definitions(': $g; ...'):
    let fr = get_current_frame()
    for:
      each g: [g, ...]
      match g
      | '$(td :: type_defn_meta.Parsed)':
          let (id, type, tvars) = type_defn_meta.unpack(td)
          when id && !fr.type_defns[id]
          | fr.type_defns := fr.type_defns ++ IdMap{ id: [type, tvars] }
      | ~else: #void

  fun lookup_found_type_definition(id):
    let [type, tvars] = get_current_frame().type_defns[id]
    values(tyex.force_type(type), tvars)

  fun parse_type(stx, op, src, tvars_box):
    tyex.parse(stx, op, src, tvars_box,
               fun (id):
                 match get_current_frame().type_defns[id]
                 | [type, tvars]: type_expr_meta.pack(type)
                 | ~else #false,
               fun (id):
                 recur loop (fr :: Frame = get_current_frame()):
                   fr.tvars[id] || (fr.parent && loop(fr.parent)))

  fun finish_current_frame():
    let fr = get_current_frame()
    let defn_types = fr.defn_types
    fr.defn_types := []
    match fr.parent
    | parent :: Frame:
        parent.defn_types := defn_types ++ parent.defn_types
    | ~else:
        fr.final_defn_types := fr.final_defn_types ++ t.let_based_poly_do(defn_types)

  fun record_frame_defn_type(sym, ty):
    let fr = get_current_frame()
    fr.defn_types := [[sym, ty], & fr.defn_types]

  fun build_register_defn_types():
    let fr = get_current_frame()
    let [[sym, ty], ...] = fr.final_defn_types    
    'block:
       t_s.register_type(#'$sym,
                         $(t.to_expression(ty)))
       ...
       #void'

  fun interaction_type_string(stx):
    let ty = t_s.lookup_poly_type(stx, #false)
    t.type_to_string(MutableMap())(ty)

  fun register_submodule(stx):
    let fr = get_current_frame()
    fr.submods := fr.submods.add(syntax_meta.flip_introduce(stx))

  fun get_submodules():
    let fr = get_current_frame()
    fr.submods

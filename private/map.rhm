#lang rhombus/static/and_meta
import:
  meta:
    "type.rhm" as t
  "type_statinfo.rhm" as t_s
  "value.rhm".value
  "value.rhm".value_meta
  "value.rhm".all_value_types
  "wrap.rhm" open
  "tuple.rhm"!tuple as tu
  "lazy.rhm" open

export:
  rename:
    braces as #%braces
    shMutableMap as MutableMap
  map_get_k
  map_update
  map_set
  map_remove
  map_delete
  map_keys
  
value.macro
| 'braces { $key_term ... :  $(val :: value_meta.Parsed), ... }':
    let '($(key :: value_meta.Parsed), ...)' = '($key_term ..., ...)'
    cond
    | all_value_types([key, ..., val, ...]):
        // context only cares about functionness, not precise type
        def key0 = t.gen_tvar(#false)
        def val0 = t.gen_tvar(#false)
        t_s.type_to_syntax(t.MapOf(#false, key0, val0))
    | ~else '#false'
| 'braces {$_, ...}':
    '#false'

meta:
  fun construct_map(elems, make):
    def '{ $key_term ...: $(val :: expr_meta.Parsed), ... }' = elems
    let '($(key :: expr_meta.Parsed), ...)' = '($key_term ..., ...)'    
    let key_tv = t.gen_tvar(#false)
    let val_tv = t.gen_tvar(#false)
    let [[key_ty, new_key], ...] = [t_s.lookup_type(key, key.group), ...]
    let [[val_ty, new_val], ...] = [t_s.lookup_type(val, val.group), ...]
    Function.pass(t.unify_do(key, key_tv, key_ty), ...)
    Function.pass(t.unify_do(val, val_tv, val_ty), ...)
    t_s.wrap_type('$make { force($new_key) : maybe_delay($val.group, $new_val), ... }'.relocate_span([elems]),
                  t.MapOf(elems, key_tv, val_tv))

expr.macro 'braces $(elems && '{ $key_term ...: $(val :: expr_meta.Parsed), ... }')':  
  construct_map(elems, 'Map')

expr.macro 'shMutableMap $(elems && '{ $key_term ...: $(val :: expr_meta.Parsed), ... }')':  
  construct_map(elems, 'MutableMap')

def fail_key = Symbol.gen()

defwrap wrap_map_get_k map_get_k(map, key, success, fail):
  def v = (dynamic_force(map) :~ ReadableMap).get(dynamic_force(key), fail_key)
  if v === fail_key
  | dynamic_force(fail)()
  | dynamic_force(success)(v)
defwrap wrap_map_update map_update(map, key, val):
  (dynamic_force(map) :~ Map) ++ { dynamic_force(key): val }
defwrap wrap_map_set map_set(map, key, val):
  (dynamic_force(map) :~ MutableMap)[dynamic_force(key)] := val
defwrap wrap_map_remove map_remove(map, key):
  (dynamic_force(map) :~ Map).remove(dynamic_force(key))
defwrap wrap_map_delete map_delete(map, key):
  (dynamic_force(map) :~ MutableMap).delete(dynamic_force(key))
defwrap wrap_map_keys map_keys(map):
  (dynamic_force(map) :~ ReadableMap).keys()

expr.macro 'map_get_k':
  ~op_stx self
  let key_tv = t.gen_tvar(self)
  let val_tv = t.gen_tvar(self)
  let res_tv = t.gen_tvar(self)
  t_s.wrap_type('wrap_map_get_k'.relocate(self),
                t.Poly(self, key_tv,
                       t.Poly(self, val_tv,
                              t.Arrow(self,
                                      [t.MapOf(self, key_tv, val_tv),
                                       key_tv,
                                       t.Arrow(self, [val_tv], res_tv),
                                       t.Arrow(self, [], res_tv)],
                                      res_tv))))

expr.macro 'map_update':
  ~op_stx self
  let key_tv = t.gen_tvar(self)
  let val_tv = t.gen_tvar(self)
  t_s.wrap_type('wrap_map_update'.relocate(self),
                t.Poly(self, key_tv,
                       t.Poly(self, val_tv,
                              t.Arrow(self,
                                      [t.MapOf(self, key_tv, val_tv),
                                       key_tv,
                                       val_tv],
                                      t.MapOf(self, key_tv, val_tv)))))
  
expr.macro 'map_set':
  ~op_stx self
  let key_tv = t.gen_tvar(self)
  let val_tv = t.gen_tvar(self)
  t_s.wrap_type('wrap_map_set'.relocate(self),
                t.Poly(self, key_tv,
                       t.Poly(self, val_tv,
                              t.Arrow(self,
                                      [t.MapOf(self, key_tv, val_tv),
                                       key_tv,
                                       val_tv],
                                      t.Vd(self)))))

expr.macro 'map_remove':
  ~op_stx self
  let key_tv = t.gen_tvar(self)
  let val_tv = t.gen_tvar(self)
  t_s.wrap_type('wrap_map_remove'.relocate(self),
                t.Poly(self, key_tv,
                       t.Poly(self, val_tv,
                              t.Arrow(self,
                                      [t.MapOf(self, key_tv, val_tv),
                                       key_tv],
                                      t.MapOf(self, key_tv, val_tv)))))
  
expr.macro 'map_delete':
  ~op_stx self
  let key_tv = t.gen_tvar(self)
  let val_tv = t.gen_tvar(self)
  t_s.wrap_type('wrap_map_delete'.relocate(self),
                t.Poly(self, key_tv,
                       t.Poly(self, val_tv,
                              t.Arrow(self,
                                      [t.MapOf(self, key_tv, val_tv),
                                       key_tv],
                                      t.Vd(self)))))
  

expr.macro 'map_keys':
  ~op_stx self
  let key_tv = t.gen_tvar(self)
  let val_tv = t.gen_tvar(self)
  t_s.wrap_type('wrap_map_keys'.relocate(self),
                t.Poly(self, key_tv,
                       t.Poly(self, val_tv,
                              t.Arrow(self,
                                      [t.MapOf(self, key_tv, val_tv)],
                                      t.ListOf(self, key_tv)))))
  

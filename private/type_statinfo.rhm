#lang rhombus/static/and_meta
import:
  meta:
    "type.rhm" as t

export:
  meta:
    type_key
    type_to_syntax
    syntax_to_type
    lookup_type
    lookup_poly_type
    wrap_type
    register_type

meta:
  def ty_to_sym = MutableMap()
  def sym_to_ty = MutableMap()

  def type_key = 'type_key'

  fun type_to_syntax(ty :: t.Type):
    Syntax.make(ty_to_sym.get(ty,
                              fun ():
                                let sym = Symbol.gen()
                                ty_to_sym[ty] := sym                                
                                sym_to_ty[sym] := ty
                                sym))

  fun syntax_to_type(stx :: Syntax):
    sym_to_ty[stx.unwrap()]

  fun lookup_poly_type(expr :: Syntax, orig :: maybe(Syntax)):
    let id = statinfo_meta.lookup(expr, type_key)
    cond
    | id: syntax_to_type(id)
    | t.configured_as_checked():
        syntax_meta.error("no type available, possibly an unbound identifier", orig || expr)
    | ~else: t.gen_tvar(#false)

  fun lookup_type(expr :: Syntax, orig :: maybe(Syntax)):
    [t.at_source(t.poly_instance(lookup_poly_type(expr, orig)), expr),
     expr]

  fun
  | wrap_type(expr :: Syntax, ty):
      statinfo_meta.wrap(expr, '(($type_key, $(type_to_syntax(ty))))')
  | wrap_type(expr :: Syntax, orig_stx :: Syntax, ty):
      wrap_type('($expr)'.relocate_span([orig_stx]), ty)

  fun register_type(sym, ty):
    sym_to_ty[sym] := ty
    ty_to_sym[ty] := sym

#lang rhombus/static/and_meta

import:
  rhombus/scribble/spacer

export:
  only_space spacer.typeset:
    fun
    type
    def
    let
    letrec
    $
    typed

spacer.bridge fun(self, tail, context, esc):  
  ~in: ~expr ~defn
  recur loop (tail = tail):
    match tail
    | '': self
    | '$(esc_use :: Operator) $t $tail ...' when esc_use.unwrap_op() == esc.unwrap_op():
        let '$_ $new_tail ...' = loop('$tail ...')
        let new_self = spacer.set(self, #'~defn)
        '$new_self $esc_use $t $new_tail ...'
    | '$pre ...: $(b :: Block)':
        '$(loop('$pre ...')) $(spacer.adjust_term(b, context, esc))'
    | '$(name :: Identifier) ... $(parens && '($arg, ...)') $post ...':
        let new_args = '($(adjust_arg(arg, context, esc)), ...)'.relocate(parens)
        let new_post:
          match '$post ...'
          | '': ''
          | '$(op && '::') $ty ...':
              '$(literal(op)) $(spacer.adjust_sequence('$ty ...', #'#{shplait/type}, esc))'
          | '$other': other
        let new_self:
          match '$name ...'
          | '': spacer.set(self, #'~expr)
          | ~else: spacer.set(self, #'~defn)
        '$new_self $name ... $new_args $new_post'
    | ~else:
        error("no match: " +& tail)

meta:
  fun literal(t):
    spacer.set(t, #'~datum)

spacer.bridge type(self, tail, context, esc):  
  ~in: ~decl
  match tail
  | '$name ... $(alts && '| $(ctr :: Block) | ...')':
      fun adjust_clause(clause):
        match clause
        | ': $name $(parens && '($arg, ...)')':
            ': $name $('($(adjust_arg(arg, context, esc)), ...)'.relocate(parens))'.relocate(clause)
        | ~else:
            clause
      let new_ctrs:
        Syntax.make([#'alts, adjust_clause(ctr), ...]).relocate(alts)
      '$self $name ... $new_ctrs'
  | '$other ...':
      '$self $other ...'

spacer.bridge typed(self, tail, context, esc):  
  ~in: ~impo
  match tail
  | '$mod_path ...: $(b :: Block)':
      let new_b:
        match b
        | ': $(g && '$name_seq ... $(op && '::') $type_seq ...')
             ...':
            let new_b = ': $('$name_seq ... $op $(spacer.adjust_sequence('$type_seq ...', #'#{shplait/type}, esc))'
                               .relocate_group(g))
                           ...'
            new_b.relocate(b)
        | ~else: b
      '$self $(spacer.adjust_sequence('$mod_path ...', #'~impo, esc)) $new_b'
  | '$other ...':
      '$self $other ...'

meta:
  fun adjust_arg(arg, context, esc):
    match arg
    | '$name ... $(op && '::') $ty ...':
        '$name ... $(literal(op)) $(spacer.adjust_sequence('$ty ...', #'#{shplait/type}, esc))'.relocate_group(arg)
    | ~else:
        arg

spacer.bridge def(self, tail, context, esc):
  ~in: ~expr
  adjust_def_like(self, tail, context, esc)

spacer.bridge let(self, tail, context, esc):
  ~in: ~expr
  adjust_def_like(self, tail, context, esc)

spacer.bridge letrec(self, tail, context, esc):
  ~in: ~expr
  adjust_def_like(self, tail, context, esc)

meta:
  fun adjust_def_like(self, tail, context, esc):
    match tail
    | '$name ... $(op && '=') $rest ...':
        let new_rest = spacer.adjust_sequence('$rest ...', context, esc)
        '$self $(adjust_arg_maybe_values('$name ...', context, esc)) $(literal(op)) $new_rest'
    | '$name ... : $(b :: Block)':
        let new_block = spacer.adjust_term(b, context, esc)
        '$self $(adjust_arg_maybe_values('$name ...', context, esc)) $new_block'
    | '$other ...':
        '$self $other ...'

  fun adjust_arg_maybe_values(arg, context, esc):
    match arg
    | '$(vals_id && 'values') $(parens && '($val_arg, ...)')':
        let new_args = '($(adjust_arg(val_arg, context, esc)), ...)'.relocate(parens)
        '$vals_id $new_args'.relocate_group(arg)
    | ~else:
        adjust_arg(arg, context, esc)

// `$` is reexported from Rhombus, but only for error reporting,
// so don't link it
spacer.bridge $(self, tail, context, esc):
  ~in: ~expr ~bind
  '$(spacer.set(self, #'~datum)) $(spacer.adjust_sequence(tail, context, esc))'

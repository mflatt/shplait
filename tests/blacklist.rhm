#lang shplait
import:
  open: "eval.rhm"

check_eval:
  1 + "a"
  ~throws "typecheck failed"

check_eval:
  def fun = 5
  ~throws "disallowed"

check_eval:
  fun (def): 5
  ~throws "disallowed"

check_eval:
  let def = 5: "ok"
  ~throws "disallowed"

check_eval:
  letrec def = 5: "ok"
  ~throws "disallowed"

check_eval:
  type def | foo()
  ~throws "disallowed"

check_eval:
  type foo | fun()
  ~throws "disallowed"

check_eval:
  type foo | bar(fun :: Int)
  ~throws "disallowed"

check_eval:
  fun (x): match x
           | []: "ok"
           | cons(fun, x): x
  ~throws "disallowed"

check_eval:
  fun (x): match x
           | []: "ok"
           | cons(x, fun): x
  ~throws "disallowed"

check_eval:
  fun (x): match '1'
           | '$fun': "ok"
  ~throws "disallowed"

check_eval:
  fun (x): match '1'
           | '$fun ...': "ok"
  ~throws "disallowed"

check_eval:
  fun (x): match none()
           | some(fun): "ok"
           | none(): "ok"
  ~throws "disallowed"

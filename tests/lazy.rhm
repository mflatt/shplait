#lang shplait
~lazy

type Shape
| circle(r :: Int)

check:
  first([1, 1/0])
  ~is 1

check:
  fst(values(1, 1/0))
  ~is 1

check:
  first(rest([1, 1/0]))
  ~raises "division by zero"

check:
  [circle(1)] == [circle(1)]
  ~is #true

check:
  [circle(1)] == [circle(2)]
  ~is #false

check:
  first(map(fun (x): [x],
            [-2, 1, 1/0]))
  ~is [-2]

check:
  block:
    fun mk(x): [x]
    first(map(mk,
              [-2, 1, 1/0]))
  ~is [-2]
check:
  first(map2(fun (x, y): x + y,
             [-2, 1, 1/0],
             [1, 2, 3]))
  ~is -1

check:
  first(filter(fun (x): x > 0,
               [-2, 1, 1/0]))
  ~is 1

check:
  first(map(add1,
            [-2, 1, 1/0]))
  ~is -1

check:
  to_string(cons(1, cons(2, [])))
  ~is "[1, 2]"

// submodule should also be lazy
module test:
  check:
    first([1, 1/0])
    ~is 1

check:
  to_string(map)
  ~is "#<function:map>"

check:
  to_string(map2)
  ~is "#<function:map2>"

check:
  to_string(filter)
  ~is "#<function:filter>"

check:
  box(1)
  ~is box(1)

check:
  box(none())
  ~is box(none())

check:
  box(none()) == box(some(1))
  ~is #false

type Exp
| idE(s :: Symbol)

check:
  cons(idE(syntax_to_symbol('x')), [])
  ~is cons(idE(#'x), [])

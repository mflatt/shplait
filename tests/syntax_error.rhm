#lang shplait
import:
  open: "eval.rhm"

check_eval:
  1 + "a"
  ~throws "typecheck failed"

check_eval:
  fun (x ::): 10
  ~throws "expected a type after separator"

check_eval:
  fun (x) :: : 10
  ~throws "expected a type after separator"

check_eval:
  nonesuch
  ~throws "unbound identifier"

check_eval:
  1 :: String
  ~throws "needs to be in a type position or in parentheses"

check:
  (1 :: Int)
  ~is 1

check_eval:
  match [] | []: "ok" | cons(x, y):
                          "ok"
                          "oops"
  ~throws "typecheck failed: Void vs. String"

check_eval:
  match [] | cons(x, y): "oops"
  ~throws "incomplete set of list clauses"

check_eval:
  match [] | []
  ~throws "bad empty-list clause"

check_eval:
  match [] | cons
  ~throws "bad cons clause"

check_eval:
  match [] | 1
  ~throws "expected a pattern followed by a `:` block"

check_eval:
  match [] | x:
             | y
  ~throws "expected a pattern followed by a `:` block"

check_eval:
  match [] | x:
             | y
  ~throws "and not with `|` immediately in the block"

check_eval:
  match []
  | ~else x: y
  ~throws "expected a `:` immediately after `~else`"

check_eval:
  match [] | ~else 10:
             | y
  ~throws "and not with `|` immediately in the block"

check_eval:
  match none() | some(1) | ~else: "ok"
  ~throws "expected an identifier"

check_eval:
  match none() | some(1): "ok" | none(): "ok"
  ~throws "expected an identifier"

check_eval:
  match none() | some(x): "ok" | :none(): "ok"
  ~throws "bad clause"

check_eval:
  match none() | some(x): "ok" | nonesuch(): "ok"
  ~throws "expected a variant name"

check_eval:
  fun ([1]): apple
  ~throws "expected identifier"

check_eval:
  type Foo
  | bar(1)
  ~throws "expected identifier"

// FIXME
#//
check_eval:
  def mutable 1 = 1
  ~throws "expected an identifier"

// FIXME
#//
check_eval:
  def values(1) = 1
  ~throws "expected identifier"

check_eval:
  def x :: 1 = 2
  ~throws "literal value is being used as a type"

check_eval:
  1 + String
  ~throws "type form is being used as an expression"

check_eval:
  fun f(x :: Int):
    1
    2
  ~throws "typecheck failed: Void vs. Int"

check_eval:
  fun f(x :: Int) :: Int:
    1
    2
  ~throws "typecheck failed: Void vs. Int"

check_eval:
  block:
    1+2
    3+3
  ~throws "typecheck failed: Void vs. Int"

check_eval:
  type BadTriple
  | Triple(fst :: ?a * ?b, snd :: ?c)
  ~throws "unguarded type variables"

check_eval:
  if:
  | 1 == 1: #true
  | 1 != 1: #false
  ~throws "if: missing test expr"

check_eval:
  fun 1
  ~throws "expected either an identifier or parenthesized arguments"

check_eval:
  (fun 1)
  ~throws "expected parenthesized arguments"

check_eval:
  fun f
  ~throws "expected parenthesized arguments after the function name"

check_eval:
  (fun f)
  ~throws "expected parenthesized arguments"

check_eval:
  (fun f ())
  ~throws "expected parenthesized arguments"

check_eval:
  fun f ()
  ~throws "expected either `::` or `:` after function arguments"

check_eval:
  fun ()
  ~throws "expected either `::` or `:` after function arguments"

check_eval:
  (fun ())
  ~throws "expected either `::` or `:` after function arguments"

check_eval:
  fun () 10
  ~throws "expected either `::` or `:`"

check_eval:
  (fun () 10)
  ~throws "expected either `::` or `:`"

check_eval:
  check: 1
  ~is 10
  ~throws "missing `~is`, `~throws`, or `~raises` line in body after `:`"

check_eval:
  check: 1 ~is 10
  ~throws "possible repair is to start keyword on a new line"

check_eval:
  trace:
    length([1,2,3])
  ~throws "trace: missing function expression"

check_eval:
  def x =
  ~throws "expression missing after `=` for definition"

check_eval:
  def x = y = 2
  ~throws "cannot have second `=` for definition"

check_eval:
  fun f(x):
    x + 1
    x + 2
  ~throws "not at the end of a function or block body"

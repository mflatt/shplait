#lang shplait
~lazy

type Value
| intV(n :: Int)
| closV(arg :: Symbol,
        body :: Exp,
        env :: Env)

type Exp
| intE(n :: Int)
| idE(s :: Symbol)
| plusE(l :: Exp,
        r :: Exp)
| multE(l :: Exp,
        r :: Exp)
| letE(n :: Symbol,
       rhs :: Exp,
       body :: Exp)
| lamE(n :: Symbol,
       body :: Exp)
| appE(fn :: Exp,
       arg :: Exp)

type Binding
| bind(name :: Symbol,
       val :: Value)

type Env = Listof(Binding)

def mt_env = []
def extend_env = cons

// parse ----------------------------------------
fun parse(s :: Syntax) :: Exp:
  match s
  | 'let $id = $rhs:
       $body':
      letE(syntax_to_symbol(id),
           parse(rhs),
           parse(body))
  | '$left + $right':
      plusE(parse(left), parse(right))
  | '$left * $right':
      multE(parse(left), parse(right))
  | 'fun ($id): $body':
      lamE(syntax_to_symbol(id),
           parse(body))
  | '$fn($arg)':
      appE(parse(fn),
           parse(arg))
  | '($e)':
      parse(e)
  | '$t':
      cond
      | syntax_is_integer(t): intE(syntax_to_integer(s))
      | syntax_is_symbol(t): idE(syntax_to_symbol(s))
      | ~else:
          error(#'parse, "invalid input")

module test:
  check:
    parse('2')
    ~is intE(2)
  check:
    parse('x')
    ~is idE(#'x)
  check:
    parse('2 + 1')
    ~is plusE(intE(2), intE(1))
  check:
    parse('3 * 4')
    ~is multE(intE(3), intE(4))
  check:
    parse('(3 * 4) + 8')
    ~is plusE(multE(intE(3), intE(4)),
              intE(8))
  check:
    parse('let x = (1 + 2):
             y')
    ~is letE(#'x, plusE(intE(1), intE(2)),
             idE(#'y))
  check:
    parse('fun (x): 9')
    ~is lamE(#'x, intE(9))
  check:
    parse('double(9)')
    ~is appE(idE(#'double), intE(9))

  check:
    parse('()')
    ~throws "invalid input"
      
// interp ----------------------------------------
fun interp(a :: Exp, env :: Env) :: Value:
  match a
  | intE(n): intV(n)
  | idE(s): lookup(s, env)
  | plusE(l, r): num_plus(interp(l, env), interp(r, env))
  | multE(l, r): num_mult(interp(l, env), interp(r, env))
  | letE(n, rhs, body):
      interp(body,
             extend_env(bind(n, interp(rhs, env)),
                        env))
  | lamE(n, body): closV(n, body, env)
  | appE(fn, arg):
      match interp(fn, env)
      | closV(n, body, c_env):
          interp(body,
                 extend_env(bind(n, interp(arg, env)),
                            c_env))
      | ~else: error(#'interp, "not a function")

module test:
  check:
    interp(parse('2'), mt_env)
    ~is intV(2)
  check:
    interp(parse('x'), mt_env)
    ~throws "free variable"
  check:
    interp(parse('x'),
           extend_env(bind(#'x, intV(9)), mt_env))
    ~is intV(9)
  check:
    interp(parse('2 + 1'), mt_env)
    ~is intV(3)
  check:
    interp(parse('2 * 3'), mt_env)
    ~is intV(6)
  check:
    interp(parse('(2 * 3) + (5 + 8)'), mt_env)
    ~is intV(19)
  check:
    interp(parse('fun (x): x + x'),
           mt_env)
    ~is closV(#'x, plusE(idE(#'x), idE(#'x)), mt_env)
  check:
    interp(parse('let x = 5:
                    x + x'),
           mt_env)
    ~is intV(10)
  check:
    interp(parse('let x = 5:
                    let x = 1 + x:
                      x + x'),
           mt_env)
    ~is intV(12)
  check:
    interp(parse('let x = 5:
                    let y = 6:
                      x'),
           mt_env)
    ~is intV(5)
  check:
    interp(parse('(fun (x): x + x)(8)'),
           mt_env)
    ~is intV(16)

  check:
    interp(parse('1(2)'), mt_env)
    ~throws "not a function"
  check:
    interp(parse('1 + (fun (x): x)'), mt_env)
    ~throws "not a number"
  check:
    interp(parse('let bad = (fun (x): x + y):
                    let y = 5:
                      bad(2)'),
           mt_env)
    ~throws "free variable"

  #//
  time:
    interp(parse('let x2 = (fun (n): n + n):
                    let x4 = (fun (n): x2(x2(n))):
                      let x16 = (fun (n): x4(x4(n))):
                        let x256 = (fun (n): x16(x16(n))):
                          let x65536 = (fun (n): x256(x256(n))):
                            x65536(1)'),
           mt_env)
               
// num_plus and num_mult ----------------------------------------
fun num_op(op :: (Int, Int) -> Int, l :: Value, r :: Value) :: Value:
  cond
  | l is_a intV && r is_a intV:
      intV(op(intV.n(l), intV.n( r)))
  | ~else:
      error(#'interp, "not a number")
fun num_plus(l :: Value, r :: Value) :: Value:
  num_op(fun (a, b): a+b, l, r)
fun num_mult(l :: Value, r :: Value) :: Value:
  num_op(fun (a, b): a*b, l, r)

module test:
  check:
    num_plus(intV(1), intV(2))
    ~is intV(3)
  check:
    num_mult(intV(3), intV(2))
    ~is intV(6)
  
// lookup ----------------------------------------
fun lookup(n :: Symbol, env :: Env) :: Value:
  match env
  | []: error(#'lookup, "free variable")
  | cons(b, rst_env):
      cond
      | n == bind.name(b):
          bind.val(b)
      | ~else:
          lookup(n, rst_env)

module test:
  check:
    lookup(#'x, mt_env)
    ~throws "free variable"
  check:
    lookup(#'x, extend_env(bind(#'x, intV(8)), mt_env))
    ~is intV(8)
  check:
    lookup(#'x, extend_env(bind(#'x, intV(9)),
                           extend_env(bind(#'x, intV(8)),
                                      mt_env)))
    ~is intV(9)
  check:
    lookup(#'y, extend_env(bind(#'x, intV(9)),
                           extend_env(bind(#'y, intV(8)),
                                      mt_env)))
    ~is intV(8)
